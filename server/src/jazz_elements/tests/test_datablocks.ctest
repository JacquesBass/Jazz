/* Jazz (c) 2018 kaalam.ai (The Authors of Jazz), using (under the same license):

   BBVA - Jazz: A lightweight analytical web server for data-driven applications.

   Copyright 2016-2017 Banco Bilbao Vizcaya Argentaria, S.A.

  This product includes software developed at

   BBVA (https://www.bbva.com/)

   Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
*/


using namespace jazz_datablocks;


SCENARIO("Testing Block Sizes")
{
	GIVEN("We want to check absolute sizes and offsets")
	{
		WHEN("We have a JazzBlock")
		{
			JazzBlock jb;

			THEN("We can check sizes and offsets")
			{
				REQUIRE(sizeof(jb.created) == 8);
				REQUIRE(sizeof(jb.hash64)  == 8);
				REQUIRE(sizeof(JazzBlockHeader) == 64);
			}
		}
	}
	GIVEN("We want to check NA values")
	{
		WHEN("We instantiate the definitions with the appropriate sizes")
		{
			unsigned char bb = JAZZ_BYTE_BOOLEAN_NA;
			int  ib = JAZZ_BOOLEAN_NA;
			int  ia = JAZZ_INTEGER_NA;
			float fa = JAZZ_SINGLE_NA;
			int sa = JAZZ_STRING_NA;
			int sb = JAZZ_STRING_EMPTY;
			long long lla = JAZZ_LONG_INTEGER_NA;
			long long llb = JAZZ_TIME_POINT_NA;
			double da = JAZZ_DOUBLE_NA;

			THEN("We get the expected values")
			{
				REQUIRE(bb == 0xff);
				REQUIRE(ib == 0xff);
				REQUIRE(ia == (int) 0x80000000);
				REQUIRE((int)fa == (int)F_NA);
				REQUIRE(sa == 0);
				REQUIRE(sb == 1);
				REQUIRE(lla == 0x8000000000000000);
				REQUIRE(llb == 0);
				REQUIRE((long long)da == (long long)R_NA);
			}
		}
	}
	GIVEN("We want to check the compiler's way to store arrays.")
	{
		THEN("We instantiate an array and check it.")
		{
			int video[3][5][4][3];

			int *pvi;

			pvi = reinterpret_cast<int *>(&video);

			REQUIRE((uintptr_t) pvi == (uintptr_t) &video);
			REQUIRE((uintptr_t) pvi == (uintptr_t) &video[0][0][0][0]);
			REQUIRE(pvi[0] == video[0][0][0][0]);

			for (int i = 0; i < 3*5*4*3; i++) pvi[i] = i;

			int dc =  1;
			int dy =  3*dc;
			int dx =  8*dy;
			int dt = 12*dx;

			REQUIRE(video[0][0][0][0] == 0);
			REQUIRE(video[0][0][0][1] == 1);
			REQUIRE(video[0][0][0][2] == 2);
			REQUIRE(video[0][0][1][0] == 3);
			REQUIRE(video[0][1][0][0] == 12);
			REQUIRE(video[1][0][0][0] == 60);

			int rank = 4;
			JazzTensorDim dim_offs = { 5*4*3, 4*3, 3, 1, 0, 0 };

			for (int t = 0; t < 3; t++) {
				for (int x = 0; x < 5; x++) {
					for (int y = 0; y < 4; y++) {
						for (int c = 0; c < 3; c++) {
							JazzTensorDim index = {t, x, y, c, 0, 0};

							int ix = 0;
							for (int i = 0; i < rank; i++) ix += index[i]*dim_offs[i];

							REQUIRE(video[t][x][y][c] == pvi[ix]);
						}
					}
				}
			}

			for (int ix = 0; ix < 3*5*4*3; ix++) {
				JazzTensorDim index;

				int j = ix;
				for (int i = 0; i < rank; i++) { index[i] = j/dim_offs[i]; j -= index[i]*dim_offs[i]; }


				int t = index[0], x = index[1], y = index[2], c = index[3];
				REQUIRE(video[t][x][y][c] == pvi[ix]);
			}
		}
	}

	GIVEN("A 4K JazzBlock with strings and attributes")
	{
		char fourK[4096];
		pJazzBlock pjb = reinterpret_cast<pJazzBlock>(&fourK);

		pjb->cell_type = CELL_TYPE_JAZZ_STRING;

		JazzTensorDim d1 = {3, 2, 4, 0, 0, 0}, d2 = {3, 2, 4, 1, 0, 0}, d3 = {3, 1, 0, 1, 0, 0}, d4 = {8, 5, 1, 5, 3, 0},
					  d5 = {1, 1, 0, 1, 0, 0}, d6 = {0, 0, 0, 0, 0, 0}, d7 = {1, 0, 0, 0, 0, 0}, d8 = {7, 11, 13, 19, 23, 31};

		pjb->set_dimensions(d2);

		REQUIRE(pjb->rank == 3);
		REQUIRE(pjb->size == 24);
		REQUIRE(pjb->dim_offs[0] == 8);
		REQUIRE(pjb->dim_offs[1] == 4);
		REQUIRE(pjb->dim_offs[2] == 1);
		REQUIRE(pjb->dim_offs[3] == 0);

		pjb->set_dimensions(d3);

		REQUIRE(pjb->rank == 1);
		REQUIRE(pjb->size == 3);
		REQUIRE(pjb->dim_offs[0] == 1);
		REQUIRE(pjb->dim_offs[1] == 0);

		pjb->set_dimensions(d4);

		REQUIRE(pjb->rank == 2);
		REQUIRE(pjb->size == 40);
		REQUIRE(pjb->dim_offs[0] == 5);
		REQUIRE(pjb->dim_offs[1] == 1);
		REQUIRE(pjb->dim_offs[2] == 0);

		pjb->set_dimensions(d5);

		REQUIRE(pjb->rank == 1);
		REQUIRE(pjb->size == 1);
		REQUIRE(pjb->dim_offs[0] == 1);
		REQUIRE(pjb->dim_offs[1] == 0);

		pjb->set_dimensions(d6);

		REQUIRE(pjb->rank == 1);
		REQUIRE(pjb->size == 0);
		REQUIRE(pjb->dim_offs[0] == 1);
		REQUIRE(pjb->dim_offs[1] == 0);

		pjb->set_dimensions(d7);

		REQUIRE(pjb->rank == 1);
		REQUIRE(pjb->size == 1);
		REQUIRE(pjb->dim_offs[0] == 1);
		REQUIRE(pjb->dim_offs[1] == 0);

		pjb->set_dimensions(d8);

		REQUIRE(pjb->rank == 6);
		REQUIRE(pjb->size == 13560547);
		REQUIRE(pjb->dim_offs[0] == 1937221);
		REQUIRE(pjb->dim_offs[1] == 176111);
		REQUIRE(pjb->dim_offs[2] == 13547);
		REQUIRE(pjb->dim_offs[3] == 713);
		REQUIRE(pjb->dim_offs[4] == 31);
		REQUIRE(pjb->dim_offs[5] == 1);

		pjb->set_dimensions(d1);

		REQUIRE(pjb->rank == 3);
		REQUIRE(pjb->size == 24);
		REQUIRE(pjb->dim_offs[0] == 8);
		REQUIRE(pjb->dim_offs[1] == 4);
		REQUIRE(pjb->dim_offs[2] == 1);
		REQUIRE(pjb->dim_offs[3] == 0);


		WHEN("...")
		{
			THEN("We instantiate an array and check it.")
			{
			}
		}
	}
}
